{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","defaultState","query","status","value","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodo","filterBySearch","todoTitle","queryText","toLowerCase","includes","filteredTodos","useMemo","completed","title","length","className","map","id","classNames","onClick","showModal","TodoFilter","onSubmit","event","preventDefault","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","a","undefined","userId","selectedUser","href","email","name","App","isLoading","setIsLoading","allTodos","todosActions","console","log","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.66049bd5.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype StatusType = {\n  type: 'status/SET',\n  payload: Status,\n};\n\ntype QueryType = {\n  type: 'query/SET',\n  payload: string,\n};\n\nconst status = (value: Status): StatusType => ({\n  type: 'status/SET',\n  payload: value,\n});\n\nconst query = (value: string): QueryType => ({\n  type: 'query/SET',\n  payload: value,\n});\n\ntype DefaultState = {\n  query: string,\n  status: Status,\n};\n\ntype Actions = StatusType | QueryType;\n\nconst defaultState: DefaultState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (state = defaultState, action: Actions): DefaultState => {\n  switch (action.type) {\n    case 'query/SET':\n      return { ...state, query: action.payload };\n\n    case 'status/SET':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  status,\n  query,\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = {\n  type: 'todos/SET',\n  payload: Todo[]\n};\n\nconst setTodos = (todos: Todo[]): SetTodos => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nconst todosReducer = (state: Todo[] = [], action: SetTodos): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setTodos };\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React, { useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const todos = useAppSelector((state) => state.todos);\n  const selectedTodo = useAppSelector((state => state.currentTodo));\n  const query = useAppSelector(state => state.filter.query);\n  const status = useAppSelector(state => state.filter.status);\n\n  const filterBySearch = (todoTitle: string, queryText: string) => {\n    return todoTitle.toLowerCase().includes(queryText.toLowerCase());\n  };\n\n  const filteredTodos = useMemo(() => {\n    return todos.filter(({ completed, title }) => {\n      switch (status) {\n        case 'active':\n          return !completed && filterBySearch(title, query);\n\n        case 'completed':\n          return completed && filterBySearch(title, query);\n\n        case 'all':\n        default:\n          return filterBySearch(title, query);\n      }\n    });\n  }, [todos, status, query]);\n\n  const showModal = (todo: Todo) => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {filteredTodos.length === 0 && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {filteredTodos.length > 0 && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map((todo: Todo) => {\n              const { id, title, completed } = todo;\n\n              return (\n                <tr key={id} data-cy=\"todo\">\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={classNames({\n                        'has-text-success': completed,\n                        'has-text-danger': !completed,\n                      })}\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => showModal(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={classNames('far', {\n                            'fa-eye-slash': selectedTodo?.id === id,\n                            'fa-eye': selectedTodo?.id !== id,\n                          })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const query = useAppSelector(state => state.filter.query);\n\n  const dispatch = useDispatch();\n\n  const handleStatusSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    switch (event.target.value) {\n      case 'completed':\n        return dispatch(actions.status(event.target.value));\n      case 'active':\n        return dispatch(actions.status(event.target.value));\n\n      case 'all':\n        return dispatch(actions.status(event.target.value));\n\n      default:\n        return event.target.value;\n    }\n  };\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.query(event.target.value));\n  };\n\n  const clearSearchBar = () => {\n    dispatch(actions.query(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={handleStatusSelect}>\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={handleQuery}\n          value={query}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearSearchBar}\n              aria-label=\"clear search bar\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    (async () => {\n      if (selectedTodo?.userId === undefined) {\n        return;\n      }\n\n      const selectedUser = await getUser(selectedTodo?.userId);\n\n      setUser(selectedUser);\n    })();\n  }, []);\n\n  const closeModal = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n              aria-label=\"close user`s todo window\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const allTodos = await getTodos();\n\n        dispatch(todosActions.setTodos(allTodos));\n\n        setIsLoading(true);\n      } catch {\n        // eslint-disable-next-line no-console\n        console.log('Check your internet connection');\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <TodoList />\n              ) : (\n                <Loader />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}